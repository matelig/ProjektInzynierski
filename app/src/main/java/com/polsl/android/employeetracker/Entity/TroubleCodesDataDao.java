package com.polsl.android.employeetracker.Entity;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TROUBLE_CODES_DATA".
*/
public class TroubleCodesDataDao extends AbstractDao<TroubleCodesData, Void> {

    public static final String TABLENAME = "TROUBLE_CODES_DATA";

    /**
     * Properties of entity TroubleCodesData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RouteId = new Property(0, long.class, "routeId", false, "ROUTE_ID");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Timestamp = new Property(2, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
    }

    private Query<TroubleCodesData> routeData_TroubleCodesDataListQuery;

    public TroubleCodesDataDao(DaoConfig config) {
        super(config);
    }
    
    public TroubleCodesDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TROUBLE_CODES_DATA\" (" + //
                "\"ROUTE_ID\" INTEGER NOT NULL ," + // 0: routeId
                "\"CODE\" TEXT," + // 1: code
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 2: timestamp
                "\"STATE\" INTEGER NOT NULL );"); // 3: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TROUBLE_CODES_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TroubleCodesData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRouteId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
        stmt.bindLong(3, entity.getTimestamp());
        stmt.bindLong(4, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TroubleCodesData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRouteId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
        stmt.bindLong(3, entity.getTimestamp());
        stmt.bindLong(4, entity.getState());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TroubleCodesData readEntity(Cursor cursor, int offset) {
        TroubleCodesData entity = new TroubleCodesData( //
            cursor.getLong(offset + 0), // routeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.getLong(offset + 2), // timestamp
            cursor.getInt(offset + 3) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TroubleCodesData entity, int offset) {
        entity.setRouteId(cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.getLong(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TroubleCodesData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TroubleCodesData entity) {
        return null;
    }

    @Override
    public boolean hasKey(TroubleCodesData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "troubleCodesDataList" to-many relationship of RouteData. */
    public List<TroubleCodesData> _queryRouteData_TroubleCodesDataList(long routeId) {
        synchronized (this) {
            if (routeData_TroubleCodesDataListQuery == null) {
                QueryBuilder<TroubleCodesData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RouteId.eq(null));
                queryBuilder.orderRaw("T.'TIMESTAMP' ASC");
                routeData_TroubleCodesDataListQuery = queryBuilder.build();
            }
        }
        Query<TroubleCodesData> query = routeData_TroubleCodesDataListQuery.forCurrentThread();
        query.setParameter(0, routeId);
        return query.list();
    }

}
