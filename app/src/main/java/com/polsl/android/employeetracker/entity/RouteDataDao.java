package com.polsl.android.employeetracker.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.polsl.android.employeetracker.helper.UploadStatus;
import com.polsl.android.employeetracker.helper.UploadStatusPropertyConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE_DATA".
*/
public class RouteDataDao extends AbstractDao<RouteData, Long> {

    public static final String TABLENAME = "ROUTE_DATA";

    /**
     * Properties of entity RouteData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartDate = new Property(1, Long.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(2, Long.class, "endDate", false, "END_DATE");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property VinNumber = new Property(4, String.class, "vinNumber", false, "VIN_NUMBER");
        public final static Property RoadLength = new Property(5, Double.class, "roadLength", false, "ROAD_LENGTH");
        public final static Property ToSend = new Property(6, boolean.class, "toSend", false, "TO_SEND");
        public final static Property UploadStatus = new Property(7, Integer.class, "uploadStatus", false, "UPLOAD_STATUS");
    }

    private DaoSession daoSession;

    private final UploadStatusPropertyConverter uploadStatusConverter = new UploadStatusPropertyConverter();

    public RouteDataDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START_DATE\" INTEGER," + // 1: startDate
                "\"END_DATE\" INTEGER," + // 2: endDate
                "\"USER_ID\" INTEGER," + // 3: userId
                "\"VIN_NUMBER\" TEXT," + // 4: vinNumber
                "\"ROAD_LENGTH\" REAL," + // 5: roadLength
                "\"TO_SEND\" INTEGER NOT NULL ," + // 6: toSend
                "\"UPLOAD_STATUS\" INTEGER);"); // 7: uploadStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RouteData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(2, startDate);
        }
 
        Long endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(3, endDate);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        String vinNumber = entity.getVinNumber();
        if (vinNumber != null) {
            stmt.bindString(5, vinNumber);
        }
 
        Double roadLength = entity.getRoadLength();
        if (roadLength != null) {
            stmt.bindDouble(6, roadLength);
        }
        stmt.bindLong(7, entity.getToSend() ? 1L: 0L);
 
        UploadStatus uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindLong(8, uploadStatusConverter.convertToDatabaseValue(uploadStatus));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RouteData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(2, startDate);
        }
 
        Long endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(3, endDate);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        String vinNumber = entity.getVinNumber();
        if (vinNumber != null) {
            stmt.bindString(5, vinNumber);
        }
 
        Double roadLength = entity.getRoadLength();
        if (roadLength != null) {
            stmt.bindDouble(6, roadLength);
        }
        stmt.bindLong(7, entity.getToSend() ? 1L: 0L);
 
        UploadStatus uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindLong(8, uploadStatusConverter.convertToDatabaseValue(uploadStatus));
        }
    }

    @Override
    protected final void attachEntity(RouteData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RouteData readEntity(Cursor cursor, int offset) {
        RouteData entity = new RouteData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startDate
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // endDate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vinNumber
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // roadLength
            cursor.getShort(offset + 6) != 0, // toSend
            cursor.isNull(offset + 7) ? null : uploadStatusConverter.convertToEntityProperty(cursor.getInt(offset + 7)) // uploadStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RouteData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEndDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setVinNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoadLength(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setToSend(cursor.getShort(offset + 6) != 0);
        entity.setUploadStatus(cursor.isNull(offset + 7) ? null : uploadStatusConverter.convertToEntityProperty(cursor.getInt(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RouteData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RouteData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RouteData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
